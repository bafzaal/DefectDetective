{"version":3,"sources":["app/models/pagination.ts","app/api/Agent.ts","app/models/defect.ts","app/models/profile.ts","app/stores/defectStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/defects/dashboard/DefectFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/defects/dashboard/DefectListItemWorker.tsx","features/defects/dashboard/DefectListItem.tsx","features/defects/dashboard/DefectList.tsx","features/defects/dashboard/DefectListItemPlaceholder.tsx","features/defects/dashboard/DefectDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/AboutPage.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MyComboBox.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","app/common/options/priorityOptions.ts","app/common/options/statusOptions.ts","features/defects/form/DefectForm.tsx","features/defects/details/DefectDetailedChat.tsx","features/defects/details/DefectDetailedHeader.tsx","features/defects/details/DefectDetailedInfo.tsx","features/defects/details/DefectDetailedSidebar.tsx","features/defects/details/DefectDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileDefects.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Defects","list","params","details","id","create","defect","update","work","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listDefects","IDefect","init","Object","assign","DefectFormValues","undefined","title","category","description","date","priority","IProfile","displayName","image","DefectStore","defectRegistry","Map","selectedDefect","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadDefects","axiosParams","result","setDefect","setPagination","setLoadingInitial","console","log","loadDefect","getDefect","runInAction","userStore","isWorking","workers","some","d","isOwner","ownerUsername","owner","find","x","Date","state","createDefect","worker","newDefect","updateDefect","updatedDefect","deleteDefect","updateWorkers","filter","cancelDefectToggle","isClosed","clearSelectedDefect","updateWorkerFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","defectsByDate","reduce","defects","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userDefects","loadingDefects","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","defectStore","followingCount","loadFollowings","loadUserDefects","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","currUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","defectId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Navbar","collapseOnSelect","expand","variant","className","fixed","Brand","href","Image","size","src","alt","Nav","Link","Toggle","aria-controls","Collapse","style","flex","to","isLoggedIn","as","NavLink","NavDropdown","width","height","Item","onClick","useState","visibility","setVisibility","Menu","horizontal","stackable","Header","icon","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","map","Popup","hoverable","trigger","circular","bordered","DefectListItem","Capitalize","charAt","toUpperCase","slice","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedDefects","group","sub","DefectListItemPlaceholder","Placeholder","marginTop","minHeight","Line","Paragraph","disabled","loadingNext","setLoadingNext","useEffect","Grid","centered","Row","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","autoComplete","placeholder","type","render","positive","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","inverted","LoadingComponent","Dimmer","MyTextArea","MyComboBox","helpers","Select","clearable","options","setValue","onBlur","setTouched","categoryOptions","text","MyDateInput","selected","priorityOptions","statusOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","position","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","defectImageStyle","defectImageTextStyle","bottom","left","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","Container","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","pointing","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotomode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","tabular","display","justifyContent","avatar","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","exact","path","HomePage","DefectDashboard","DefectDetails","DefectForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.904eb0e3.chunk.js","sourcesContent":["export interface Pagination \n{\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> \n{\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams \n{\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2)\n    {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { DefectFormValues, IDefect } from '../models/defect';\nimport { PaginatedResult } from '../models/pagination';\nimport { IPhoto, IProfile, IUserDefect } from '../models/profile';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if(process.env.NODE_ENV === 'development')\n    {\n        await sleep(1000);\n    }\n    const pagination = response.headers['pagination'];\n    if(pagination)\n    {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modalStateErrors.flat()\n            }\n            break;\n        case 401:\n            toast.error('Unauthorized');\n            break;\n        case 404:\n            toast.error(\"Not Found\");\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Defects = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<IDefect[]>>('/defects', {params}).then(responseBody),\n    details: (id: string) => requests.get<IDefect>(`/defects/${id}`),\n    create: (defect: DefectFormValues) => requests.post<void>('/defects', defect),\n    update: (defect: DefectFormValues) => requests.put<void>(`/defects/${defect.id}`, defect),\n    delete: (id: string) => requests.del<void>(`/defects/${id}`),\n    work: (id: string) => requests.post<void>(`/defects/${id}/work`, {})\n}\n\nconst Account = {\n    current: () => requests.get<IUser>('/account'),\n    login: (user: IUserFormValues) => requests.post<IUser>('/account/login', user),\n    register: (user: IUserFormValues) => requests.post<IUser>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<IProfile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<IPhoto>('photos', formData, {\n            headers: { 'Content-type': 'multipart/form-data' }\n        });\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<IProfile>) => { requests.put('profiles', profile) },\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => requests.get<IProfile[]>(`/follow/${username}?predicate=${predicate}`),\n    listDefects: (username: string, predicate: string) => requests.get<IUserDefect[]>(`/profiles/${username}/defects?predicate=${predicate}`)\n}\n\nconst agent = {\n    Defects, Account, Profiles\n}\n\nexport default agent;","import { IProfile } from \"./profile\";\n\nexport interface IDefect {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    priority: string;\n    status: string;\n    ownerUsername: string;\n    isClosed: boolean;\n    isWorking: boolean;\n    isOwner: boolean;\n    owner?: IProfile;\n    workers: IProfile[]\n  }\n\n  export class IDefect implements IDefect\n  {\n    constructor(init?: DefectFormValues)\n    {\n      Object.assign(this, init);\n    }\n  }\n\n  export class DefectFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    priority: string = '';\n    status: string = '';\n\n    constructor(defect?: DefectFormValues)\n    {\n      if(defect)\n      {\n        this.id = defect.id;\n        this.title = defect.title;\n        this.category = defect.category;\n        this.description = defect.description;\n        this.date = defect.date;\n        this.priority = defect.priority;\n        this.status = defect.status;\n      }\n    }\n  }","import { IUser } from \"./user\";\n\nexport interface IProfile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: IPhoto[];\n}\n\nexport class IProfile implements IProfile {\n    constructor(user: IUser) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n\n    }\n}\n\nexport interface IPhoto {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface IUserDefect {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n    isClosed: boolean;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/Agent\";\nimport { DefectFormValues, IDefect } from \"../models/defect\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { IProfile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class DefectStore\n{\n    defectRegistry = new Map<string, IDefect>();\n    selectedDefect: IDefect | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor()\n    {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.defectRegistry.clear();\n                this.loadDefects();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) =>\n    {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) =>\n    {\n        const resetPredicate = () =>\n        {\n            this.predicate.forEach((value, key) => {\n                if(key !== 'startDate')\n                {\n                    this.predicate.delete(key)\n                }\n            })\n        }\n        switch(predicate)\n        {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isWorking':\n                resetPredicate();\n                this.predicate.set('isWorking', true);\n                break;\n            case 'isOwner':\n                resetPredicate();\n                this.predicate.set('isOwner', true);\n                break;\n            case 'isClosed':\n                resetPredicate();\n                this.predicate.set('isClosed', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    get axiosParams()\n    {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if(key === 'startDate')\n            {\n                params.append(key, (value as Date).toISOString())\n            }\n            else\n            {\n                params.append(key, value)\n            }\n        })\n        return params;\n    }\n\n    get defectsByDate()\n    {\n        return Array.from(this.defectRegistry.values()).sort((a, b) => \n        a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedDefects()\n    {\n        return Object.entries(\n            this.defectsByDate.reduce((defects, defect) => {\n                const date = format(defect.date!, 'dd MMM yyyy');\n                defects[date] = defects[date] ? [...defects[date], defect] : [defect];\n                return defects;\n            }, {} as {[key: string]: IDefect[]})\n        )\n    }\n\n    loadDefects = async () =>\n    {\n        this.loadingInitial = true;\n        try\n        {\n            const result = await agent.Defects.list(this.axiosParams);\n            result.data.forEach(defect => {\n                this.setDefect(defect);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        }\n        catch(error)\n        {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) =>\n    {\n        this.pagination = pagination;\n    }\n\n    loadDefect = async (id: string) =>\n    {\n        let defect = this.getDefect(id);\n        if(defect)\n        {\n            this.selectedDefect = defect;\n            return defect;\n        }\n        else\n        {\n            this.loadingInitial = true;\n            try\n            {\n                defect = await agent.Defects.details(id);\n                this.setDefect(defect);\n                runInAction(() => {this.selectedDefect = defect;});\n                this.setLoadingInitial(false);\n                return defect;\n            }\n            catch(error)\n            {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setDefect = (defect: IDefect) =>\n    {\n        const user = store.userStore.user;\n        if(user)\n        {\n            defect.isWorking = defect.workers!.some(\n                d => d.username === user.username\n            )\n            defect.isOwner = defect.ownerUsername === user.username;\n            defect.owner = defect.workers?.find(x => x.username === defect.ownerUsername);\n        }\n        defect.date = new Date(defect.date!);\n        this.defectRegistry.set(defect.id, defect);\n    }\n\n    private getDefect = (id: string) =>\n    {\n        return this.defectRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) =>\n    {\n        this.loadingInitial = state;\n    }\n\n    createDefect = async (defect: DefectFormValues) =>\n    {\n        const user = store.userStore.user;\n        const worker = new IProfile(user!);\n        try\n        {\n            await agent.Defects.create(defect);\n            const newDefect = new IDefect(defect);\n            newDefect.ownerUsername = user!.username;\n            newDefect.workers = [worker];\n            this.setDefect(newDefect);\n            runInAction(() => {\n                this.selectedDefect = newDefect;\n            })\n        }\n        catch(error)\n        {\n            console.log(error);\n        }\n    }\n\n    updateDefect = async (defect: DefectFormValues) =>\n    {\n        try\n        {\n            await agent.Defects.update(defect);\n            runInAction(() => {\n                if(defect.id)\n                {\n                    let updatedDefect = {...this.getDefect(defect.id), ...defect}\n                    this.defectRegistry.set(defect.id, updatedDefect as IDefect);\n                    this.selectedDefect = updatedDefect as IDefect;\n                }\n            })\n        }\n        catch(error)\n        {\n            console.log(error);\n            this.loading = false;\n        }\n    }\n\n    deleteDefect = async (id: string) =>\n    {\n        this.loading = true;\n        try\n        {\n            await agent.Defects.delete(id);\n            runInAction(() => {\n                this.defectRegistry.delete(id);\n                this.loading = false;\n            })\n        }\n        catch(error)\n        {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateWorkers = async () => \n    {\n        const user = store.userStore.user;\n        this.loading = true;\n        try\n        {\n            await agent.Defects.work(this.selectedDefect!.id);\n            runInAction(() => {\n                if(this.selectedDefect?.isWorking)\n                {\n                    this.selectedDefect.workers = this.selectedDefect.workers?.filter(d => d.username !== user?.username);\n                    this.selectedDefect.isWorking = false;\n                }\n                else\n                {\n                    const worker = new IProfile(user!);\n                    this.selectedDefect?.workers?.push(worker);\n                    this.selectedDefect!.isWorking = true;\n                }\n                this.defectRegistry.set(this.selectedDefect!.id, this.selectedDefect!);\n            })\n        }\n        catch(error)\n        {\n            console.log(error);\n        }\n        finally\n        {\n            runInAction(() => this.loading = false)\n        }\n    }\n\n    cancelDefectToggle = async () =>\n    {\n        this.loading = true;\n        try\n        {\n            await agent.Defects.work(this.selectedDefect!.id);\n            runInAction(() => {\n                this.selectedDefect!.isClosed = !this.selectedDefect?.isClosed;\n                this.defectRegistry.set(this.selectedDefect!.id, this.selectedDefect!);\n            })\n        }\n        catch(error)\n        {\n            console.log(error);\n        }\n        finally\n        {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedDefect = () => \n    {\n        this.selectedDefect = undefined;\n    }\n\n    updateWorkerFollowing = (username: string) =>\n    {\n        this.defectRegistry.forEach(defect => {\n            defect.workers.forEach(worker => {\n                if(worker.username === username)\n                {\n                    worker.following ? worker.followersCount-- : worker.followersCount++;\n                    worker.following = !worker.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/Agent\";\nimport { IPhoto, IProfile, IUserDefect } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: IProfile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: IProfile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userDefects: IUserDefect[] = [];\n    loadingDefects = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => \n            {\n                if(activeTab === 3 || activeTab === 4)\n                {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                }\n                else\n                {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) =>\n    {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        }\n        catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        }\n        catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<IProfile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) \n                {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = { ...this.profile, ...profile as IProfile };\n                this.loading = false;\n            })\n        }\n        catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) =>\n    {\n        this.loading = true;\n        try\n        {\n            await agent.Profiles.updateFollowing(username);\n            store.defectStore.updateWorkerFollowing(username);\n            runInAction(() => {\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username)\n                {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if(this.profile && this.profile.username === store.userStore.user?.username)\n                {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if(profile.username === username)\n                    {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            });\n        }\n        catch(error)\n        {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) =>\n    {\n        this.loadingFollowings = true;\n        try\n        {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        }\n        catch(error)\n        {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserDefects = async (username: string, predicate?: string) => \n    {\n        this.loadingDefects = true;\n        try\n        {\n            const defects = await agent.Profiles.listDefects(username, predicate!);\n            runInAction(() => {\n                this.userDefects = defects;\n                this.loadingDefects = false;\n            })\n        }\n        catch(error)\n        {\n            console.log(error);\n            runInAction(() => {\n                this.loadingDefects = false;\n            })\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/Agent\";\nimport { IUser, IUserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: IUser | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: IUserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/defects');\n            store.modalStore.closeModal();\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try \n        {\n            const currUser = await agent.Account.current();\n            runInAction(() => this.user = currUser)\n        }\n        catch(error)\n        {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: IUserFormValues) =>\n    {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/defects');\n            store.modalStore.closeModal();\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) =>\n    {\n        if(this.user)\n        {\n            this.user.image = image;\n        }\n    }\n\n    setDisplayName = (name: string) => \n    {\n        if(this.user)\n        {\n            this.user.displayName = name;\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport DefectStore from \"./defectStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface IStore\n{\n    defectStore: DefectStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: IStore = {\n    defectStore: new DefectStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore()\n{\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { IServerError } from \"../models/serverError\";\n\nexport default class CommonStore\n{\n    error: IServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor()\n    {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => \n            {\n                if (token)\n                {\n                    window.localStorage.setItem('jwt', token)\n                }\n                else\n                {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: IServerError) =>\n    {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) =>\n    {\n        this.token = token;\n    }\n\n    setAppLoaded = () => \n    {\n        this.appLoaded = true;\n    }\n\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface IModal\n{\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore\n{\n    modal: IModal = {\n        open: false,\n        body: null\n    }\n\n    constructor()\n    {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) =>\n    {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () =>\n    {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { IChatComment } from \"../models/comment\";\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { store } from \"./store\";\n\nexport default class CommentStore\n{\n    comments: IChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor()\n    {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (defectId: string) =>\n    {\n        if(store.defectStore.selectedDefect)\n        {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?defectId=' + defectId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: IChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: IChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => \n    {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () =>\n    {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) =>\n    {\n        values.defectId = store.defectStore.selectedDefect?.id;\n        try\n        {\n            await this.hubConnection?.invoke('SendComment', values);\n        }\n        catch(error)\n        {\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport { Link, NavLink } from 'react-router-dom';\nimport { HashLink } from 'react-router-hash-link';\nimport { Image } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport RButton from 'react-bootstrap/Button';\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n    const { userStore } = useStore();\n    return (\n        <Navbar id=\"navigationBar\" collapseOnSelect expand=\"lg\" variant=\"dark\" className=\"navBar\" fixed=\"top\">\n            <Navbar.Brand id=\"navImage\" href=\"/\"><Image size='mini' src='/assets/logo_red.png' alt='logo' /></Navbar.Brand>\n            <div className=\"item header\"><Nav.Link href=\"/\" className=\"linkNav\">Defect Detective</Nav.Link></div>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"text-center\" style={{ flex: 1 }}>\n                    <div className=\"item header\"><HashLink to=\"/#Home\" className=\"linkNav nav-link\">Home</HashLink></div>\n                    <div className=\"item header\"><HashLink to=\"/#About\" className=\"linkNav nav-link\">About</HashLink></div>\n                    {userStore.isLoggedIn ? (\n                        <div className=\"item header\"><Nav.Link href=\"/Defects\" className=\"linkNav\">Dashboard</Nav.Link></div>\n                    ) : (<></>)}\n                </Nav>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Nav className=\"text-center\">\n                            <RButton className=\"text-center\" size=\"sm\" variant=\"outline-danger\" as={NavLink} to='/createDefect'>Create Defect</RButton>\n                        </Nav>\n                        <Nav className=\"text-center clearfix\">\n                            <NavDropdown\n                                title={\n                                    <div className=\"pull-left userProfile\">\n                                        <img id=\"userNavImage\"\n                                            src={user?.image || '/assets/user.png'}\n                                            alt=\"user pic\"\n                                            width=\"35\"\n                                            height=\"35\"\n                                        />\n\n                                        <h4 id=\"userNavName\" className=\"text-center\">{user?.displayName}</h4>\n                                    </div>\n                                }\n                                id=\"basic-nav-dropdown\">\n\n                                <NavDropdown.Item as={Link} to={`/profiles/${user?.username}`}>My Profile</NavDropdown.Item>\n                                <NavDropdown.Item onClick={logout}>Log Out</NavDropdown.Item>\n                            </NavDropdown>\n                        </Nav>\n                    </>\n                ) : (<></>)}\n            </Navbar.Collapse>\n        </Navbar>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function DefectFilters() \n{\n    const {defectStore: {predicate, setPredicate}} = useStore();\n    const [visibility, setVisibility] = useState(false);\n    return (\n        <>\n            <Menu horizontal=\"true\" stackable size='large' className=\"justify-content-center\">\n                <Header icon='filter' attached color='red' content='Filters' />\n                <Menu.Item \n                    content='Open Defects'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content='Closed Defects'\n                    active={predicate.has('isClosed')}\n                    onClick={() => setPredicate('isClosed', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm Working on\" \n                    active={predicate.has('isWorking')}\n                    onClick={() => setPredicate('isWorking', 'true')}\n                />\n                <Menu.Item\n                    content=\"I've Created\" \n                    active={predicate.has('isOwner')}\n                    onClick={() => setPredicate('isOwner', 'true')}\n                />\n                <Menu.Item\n                    content=\"By Date\" \n                    active={visibility}\n                    onClick={() => setVisibility(!visibility)}\n                />\n            </Menu>\n            <Header />\n            {visibility ? (\n                <Calendar \n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || null}\n            />\n            ) : (<></>)}\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { IProfile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface IProps {\n    profile: IProfile;\n}\n\nexport default observer(function FollowButton({ profile }: IProps) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if(userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string)\n    {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                    fluid color='teal' \n                    content={profile.following ? 'Following' : 'Not Following'} \n                />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card, Icon, Image } from 'semantic-ui-react'\nimport { IProfile } from '../../app/models/profile'\nimport FollowButton from './FollowButton'\n\ninterface Props\n{\n    profile: IProfile;\n}\n\nexport default observer(function ProfileCard({profile}: Props)\n{\n\n    function truncate(str: string | undefined)\n    {\n        if(str)\n        {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return(\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Image, List, Popup } from 'semantic-ui-react'\nimport { IProfile } from '../../../app/models/profile'\nimport ProfileCard from '../../profiles/ProfileCard'\n\ninterface IProps {\n    workers: IProfile[];\n}\n\nexport default observer(function DefectListItemWorker({ workers }: IProps) {\n    const styles =\n    {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {workers.map(worker => (\n                <Popup\n                    hoverable key={worker.username}\n                    trigger={\n                        <List.Item key={worker.username} as={Link} to={`/profiles/${worker.username}`}>\n                            <Image \n                                size='mini' \n                                circular src={worker.image || '/assets/user.png'} \n                                bordered style={worker.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={worker} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { IDefect } from '../../../app/models/defect';\nimport { format } from 'date-fns';\nimport DefectListItemWorker from './DefectListItemWorker';\n\ninterface IProps {\n    defect: IDefect\n}\n\nexport default function DefectListItem({ defect }: IProps) {\n\n    function Capitalize(str: string) \n    {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {defect.isClosed &&\n                    <Label attached='top' color='red' content='Closed' style={{ textAlign: 'center' }} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={defect.owner?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/defects/${defect.id}`}>\n                                {defect.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${defect.ownerUsername}`}>{defect.owner?.displayName}</Link></Item.Description>\n                            {defect.isOwner && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are the owner of this Defect\n                                </Label>\n                                </Item.Description>\n                            )}\n                            {defect.isWorking && !defect.isOwner && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are working on this Defect\n                                </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(defect.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='exclamation' /> {`Priority: ${Capitalize(defect.priority)}`}\n                    <Icon name='info' /> {`Status: ${Capitalize(defect.status)}`}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <DefectListItemWorker workers={defect.workers!} />\n            </Segment>\n            <Segment clearing>\n                <span>{defect.description}</span>\n                <Button\n                    as={Link}\n                    to={`/defects/${defect.id}`}\n                    color='red'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}\n","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport DefectListItem from './DefectListItem';\n\nexport default observer(function DefectList() {\n    const { defectStore } = useStore();\n    const { groupedDefects } = defectStore;\n\n    return (\n        <>\n            {groupedDefects.map(([group, defects]) => (\n                <Fragment key={group}>\n                    <Header sub color='red'>\n                        {group}\n                    </Header>\n                    {defects.map(defect => (\n                        <DefectListItem key={defect.id} defect={defect} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function DefectListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport DefectFilters from './DefectFilters';\nimport DefectList from './DefectList';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport DefectListItemPlaceholder from './DefectListItemPlaceholder';\n\nexport default observer(function DefectDashboard() {\n    const { defectStore } = useStore();\n    const { loadDefects, defectRegistry, setPagingParams, pagination } = defectStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadDefects().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (defectRegistry.size <= 1) loadDefects();\n    }, [defectRegistry.size, loadDefects])\n\n    return (\n        <Grid centered>\n            <Grid.Row id=\"filterRow\">\n                <DefectFilters />\n            </Grid.Row>\n            <Grid.Column width='16'>\n                {defectStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <DefectListItemPlaceholder />\n                        <DefectListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <DefectList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width={16}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n{\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: IProps)\n{\n    const [field, meta] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const { userStore } = useStore();\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\n                setErrors({ error: 'Invalid Email or Password' }))}\n        >\n            {({ handleSubmit, isSubmitting, errors }) => (\n                <>\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Defect Detective' className=\"logInTitle\" textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' className=\"logInButton\" type='submit' fluid />\n                </Form>\n                </>\n            )}\n        </Formik>\n    )\n})","import React from 'react'\nimport { Message } from 'semantic-ui-react'\n\ninterface IProps\n{\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: IProps)\n{\n    return(\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const { userStore } = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\n                setErrors({error}))}\n            validationSchema = {Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign Up for Defect Detective' className=\"logInTitle\" textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                            <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid className=\"logInButton\" />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from \"mobx-react-lite\";\n\nexport default observer(function AboutPage() {\n    return (\n        <>\n            <header>\n                <h1 className=\"diamond\">ABOUT</h1>\n            </header>\n            <div id=\"About\" className=\"ui stackable grid\">\n                <div className=\"three column row\">\n                    <div className=\"column text-center\">\n                        <i className=\"bug huge icon aboutIcon\"></i>\n                        <h2 className=\"ui big header\">Track Defects</h2>\n                        <p>Defect Detective provides a platform to organize and systemize defects with your team\n                            while concurrently serving as a social media app. </p>\n                    </div>\n                    <div className=\"column text-center\">\n                        <i className=\"handshake outline huge icon aboutIcon\"></i>\n                        <h2 className=\"ui big header\">Teamwork</h2>\n                        <p> Work with your team to analyze and update the status of all defects.\n                            Manage relationships by following other team members and viewing their profiles. </p>\n                    </div>\n                    <div className=\"column text-center\">\n                        <i className=\"comment outline huge icon aboutIcon\"></i>\n                        <h2 className=\"ui big header\">Live Chat</h2>\n                        <p>Chat live about any defect at the Defect Details page. All chat comments are independent\n                            to each defect to avoid clutter and confusion.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"three column row\">\n                    <div className=\"column text-center\">\n                        <i className=\"archive huge icon aboutIcon\"></i>\n                        <h2 className=\"ui big header\">Performance History</h2>\n                        <p>Examine team history by viewing all previously created and closed defects.\n                            Also inspect defects individual team members created or worked on.\n                        </p>\n                    </div>\n                    <div className=\"column text-center\">\n                        <i className=\"filter huge icon aboutIcon\"></i>\n                        <h2 className=\"ui big header\">Filter</h2>\n                        <p>Effortlessly sort defects at the Defect Dashboard by filtering through various options.\n                            The defects are defaulted to filter by date.\n                        </p>\n                    </div>\n                    <div className=\"column text-center\">\n                        <i className=\"computer huge icon aboutIcon\"></i>\n                        <h2 className=\"ui big header\">Fully Responsive</h2>\n                        <p>Defect Detective is fully responsive which allows you to efficiently update and keep track of defects on the go using any device.</p>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Header, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\nimport Navbar from \"../../app/layout/NavBar\";\nimport AboutPage from './AboutPage';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n\n    return (\n        <>\n            <Navbar />\n            <div id=\"Home\">\n                <div id=\"landingText\" className=\"ui text-center\">\n                    <Header as='h1' className=\"headerText text-center diamond\" inverted>\n                        Defect Detective\n                    </Header>\n                    <Header as='h3' id=\"subHeaderText\" inverted>\n                        Collaborate with your team and work together to resolve defects.\n                    </Header>\n                    {userStore.isLoggedIn ? (\n                        <>\n                            <Button as={Link} to='/defects' size='large' className=\"red\">\n                                Go to Defects!\n                        </Button>\n                        </>\n                    ) : (\n                        <>\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='large' className=\"red\">\n                                Login\n                        </Button>\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='large' className=\"white\" inverted>\n                                Register\n                        </Button>\n                        </>\n                    )}\n                </div>\n            </div>\n            <AboutPage />\n        </>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface IProps\n{\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: IProps)\n{\n    return(\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n{\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: IProps)\n{\n    const [field, meta] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n{\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MyComboBox(props: IProps)\n{\n    const [field, meta, helpers] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    { text: 'Frontend', value: 'frontend' },\n    { text: 'Backend', value: 'backend' },\n    { text: 'Testing', value: 'testing' },\n    { text: 'Database', value: 'database' },\n    { text: 'Design', value: 'design' },\n    { text: 'Deployment', value: 'deployment' }\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>)\n{\n    const [field, meta, helpers] = useField(props.name!);\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const priorityOptions = [\n    { text: 'Low', value: 'low' },\n    { text: 'Medium', value: 'medium' },\n    { text: 'High', value: 'high' },\n]","export const statusOptions = [\n    { text: 'Open', value: 'open' },\n    { text: 'In Progress', value: 'in progress' },\n    { text: 'Closed', value: 'closed' },\n]","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MyComboBox from '../../../app/common/form/MyComboBox';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { DefectFormValues } from '../../../app/models/defect';\nimport { priorityOptions } from '../../../app/common/options/priorityOptions';\nimport { statusOptions } from '../../../app/common/options/statusOptions';\n\nexport default observer(function DefectForm() {\n    const history = useHistory();\n    const { defectStore } = useStore();\n    const { createDefect, updateDefect, loadDefect, loadingInitial } = defectStore;\n    const { id } = useParams<{ id: string }>();\n    const [defect, setDefect] = useState<DefectFormValues>(new DefectFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The defect title is required'),\n        description: Yup.string().required('The defect description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        priority: Yup.string().required(),\n        status: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) loadDefect(id).then(defect => setDefect(new DefectFormValues(defect)))\n    }, [id, loadDefect]);\n\n    function handleFormSubmit(defect: DefectFormValues) {\n        if (!defect.id) {\n            let newDefect = {\n                ...defect,\n                id: uuid()\n            };\n            createDefect(newDefect).then(() => history.push(`/defects/${newDefect.id}`))\n        }\n        else {\n            updateDefect(defect).then(() => history.push(`/defects/${defect.id}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading Defect...' />\n\n    return (\n        <>\n        <Header as='h2' content='Defect Details' size='huge' textAlign='center' color='red' id=\"formTitle\" />\n        <Segment clearing>\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={defect}\n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <Header content='Title' sub color='red' />\n                        <MyTextInput name='title' placeholder='Title' />\n                        <Header content='Description' sub color='red' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <Header content='Category' sub color='red' />\n                        <MyComboBox options={categoryOptions} placeholder='Category' name='category' />\n                        <Header content='Date' sub color='red' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM, d, yyyy h:mm aa'\n                        />\n                        <Header content='Priority' sub color='red' />\n                        <MyComboBox options={priorityOptions} placeholder='Priority' name='priority' />\n                        <Header content='Status' sub color='red' />\n                        <MyComboBox options={statusOptions} placeholder='Status' name='status' />\n                        <Button\n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting}\n                            floated='right'\n                            positive\n                            type='submit'\n                            content='Submit' />\n                        <Button as={Link} to='/defects' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n\n        </Segment>\n        </>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup'\nimport { formatDistanceToNow } from 'date-fns/esm'\n\ninterface IProps {\n    defectId: string;\n}\n\nexport default observer(function DefectDetailedChat({ defectId }: IProps) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (defectId) {\n            commentStore.createHubConnection(defectId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, defectId])\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='red'\n                style={{ border: 'none' }}\n            >\n                <Header id=\"chatTitle\">Chat about this defect</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return; // Creates new line\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { IDefect } from \"../../../app/models/defect\";\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst defectImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst defectImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface IProps \n{\n    defect: IDefect\n}\n\nexport default observer(function DefectDetailedHeader({ defect }: IProps) {\n    const { defectStore: { updateWorkers, loading, cancelDefectToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {defect.isClosed &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Closed' />\n                }\n                <Image src={process.env.PUBLIC_URL + `/assets/${defect.category}.jpg`} fluid style={defectImageStyle} />\n                <Segment style={defectImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={defect.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(defect.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${defect.owner?.username}`}>{defect.owner?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {defect.isOwner ? (\n                    <>\n                        <Button \n                            color={defect.isClosed ? 'green' : 'red'}\n                            floated='left' basic\n                            content={defect.isClosed ? 'Re-Open Defect' : 'Close Defect'}\n                            onClick={cancelDefectToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} \n                            disabled={defect.isClosed}\n                            to={`/manage/${defect.id}`} \n                            color='orange' floated='right'>\n                            Manage Defect\n                        </Button>\n                    </>\n                ) : defect.isWorking ? (\n                    <Button loading={loading} onClick={updateWorkers}>Cancel Work</Button>\n                ) : (\n                    <Button disabled={defect.isClosed} loading={loading} onClick={updateWorkers} color='teal'>Work on Defect</Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { IDefect } from \"../../../app/models/defect\";\nimport { format } from 'date-fns';\n\ninterface IProps {\n    defect: IDefect\n}\n\nexport default observer(function DefectDetailedInfo({ defect }: IProps) {\n\n    function Capitalize(str: string) \n    {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={16}>\n                        <Icon size='large' color='red' name='info' />\n                        <span>{defect.description}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={16}>\n                        <Icon name='calendar' size='large' color='red' />\n                        <span>\n                            {format(defect.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={16}>\n                        <Icon name='marker' size='large' color='red' />\n                        <span>{`Priority: ${Capitalize(defect.priority)}`}, {`Status: ${Capitalize(defect.status)}`}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image, Header } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { IDefect } from '../../../app/models/defect'\n\ninterface IProps {\n    defect: IDefect;\n}\n\nexport default observer(function DefectDetailedSidebar({ defect: { workers, owner } }: IProps) {\n    if (!workers) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='red'\n                id=\"defectWorkers\"\n            >\n                <Header id=\"workersTitle\">{workers.length} {workers.length === 1 ? 'Worker' : 'Workers'} </Header>\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {workers.map(worker => (\n                        <Item style={{ position: 'relative' }} key={worker.username}>\n                            {worker.username === owner?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Creator\n                                </Label>}\n                            <Image size='tiny' src={worker.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${worker.username}`}>{worker.displayName}</Link>\n                                </Item.Header>\n                                {worker.following && \n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport DefectDetailedChat from './DefectDetailedChat';\nimport DefectDetailedHeader from './DefectDetailedHeader';\nimport DefectDetailedInfo from './DefectDetailedInfo';\nimport DefectDetailedSidebar from './DefectDetailedSidebar';\n\nexport default observer(function DefectDetails()\n{\n\n    const {defectStore} = useStore();\n    const {selectedDefect: defect, loadDefect, loadingInitial, clearSelectedDefect} = defectStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if(id) loadDefect(id);\n        return () => clearSelectedDefect();\n    }, [id, loadDefect, clearSelectedDefect]);\n\n    if(loadingInitial || !defect) return <LoadingComponent />;\n\n    return(\n        <Grid stackable={true}>\n            <Grid.Column width={10}>\n                <DefectDetailedHeader defect={defect} />\n                <DefectDetailedInfo defect={defect} />\n                <DefectDetailedChat defectId={defect.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <DefectDetailedSidebar defect={defect} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'defects/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'defects', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error Component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound()\n{\n    return(\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                We are unable to find what you're looking for.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/defects' primary>\n                    Return to Defects Page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError()\n{\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n                <Segment>\n                    <Header as='h4' content='Stack Trace' color='red' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer()\n{\n    const {modalStore} = useStore();\n\n    return(\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n\n})","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"semantic-ui-react\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\n\ninterface IProps {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({ setEditMode }: IProps) {\n    const { profileStore: { profile, updateProfile } } = useStore();\n    return (\n        <Formik\n            initialValues={{\n                displayName: profile?.displayName, bio: profile?.bio\n            }}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({ isSubmitting, isValid, dirty }) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                    <Button\n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )} \n        </Formik>\n    )\n})\n","import React, { useState } from 'react';\nimport { useStore } from \"../../app/stores/store\";\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\nimport ProfileEditForm from \"./ProfileEditForm\";\nimport { observer } from 'mobx-react-lite';\n\nexport default observer(function ProfileAbout() {\n    const { profileStore } = useStore();\n    const { isCurrentUser, profile } = profileStore;\n    const [editMode, setEditMode] = useState(false);\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />)}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserDefect } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Open Defects', pane: { key: 'open' } },\n    { menuItem: 'Closed Defects', pane: { key: 'closed' } },\n    { menuItem: 'Created', pane: { key: 'owner' } }\n];\n\nexport default observer(function ProfileDefects() {\n    const { profileStore } = useStore();\n    const {\n        loadUserDefects,\n        profile,\n        loadingDefects,\n        userDefects\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserDefects(profile!.username);\n    }, [loadUserDefects, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserDefects(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingDefects}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Defects'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4} stackable={true}>\n                        {userDefects.map((defect: IUserDefect) => (\n                            <Card\n                                as={Link}\n                                to={`/defects/${defect.id}`}\n                                key={defect.id}\n                            >\n                                <Image\n                                    src={process.env.PUBLIC_URL + `/assets/${defect.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{defect.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(defect.date), 'do LLL')}</div>\n                                        <div>{format(new Date(defect.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return(\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' \n                        content={activeTab === 3 ? `Users Following ${profile?.displayName}` : `Users ${profile?.displayName} is Following`}\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4} stackable={true}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps\n{\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: IProps) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{ height: 200, width: '100%' }}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface IProps {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({ setFiles }: IProps) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop Image Here' />\n            \n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface IProps\n{\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: IProps) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='red' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='red' content='Step 2 - Resize Image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='red' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 && \n                <>\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                    <Button.Group widths={2}>\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                    </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { IPhoto, IProfile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface IProps {\n    profile: IProfile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: IProps) {\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotomode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob)\n    {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: IPhoto, e: SyntheticEvent<HTMLButtonElement>)\n    {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: IPhoto, e: SyntheticEvent<HTMLButtonElement>)\n    {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotomode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotomode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotomode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group stackable={true} itemsPerRow={4}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button basic color='green' content='Main' \n                                                name={'main' + photo.id} disabled={photo.isMain} \n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n                                            <Button basic color='red' icon='trash'\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                disabled={photo.isMain}\n                                                name={photo.id}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { IProfile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileDefects from './ProfileDefects';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface IProps {\n    profile: IProfile;\n}\n\nexport default observer(function ProfileContent({ profile }: IProps) {\n    const { profileStore } = useStore();\n    const { setActiveTab } = profileStore;\n\n    const panes = [\n        { menuItem: 'About', render: () => <ProfileAbout /> },\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n        { menuItem: 'Defects', render: () => <ProfileDefects /> },\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\n    ];\n    return (\n        <Tab\n            menu={{\n                attached: true,\n                tabular: true,\n                style: {\n                    display: \"flex\",\n                    justifyContent: \"center\"\n                },\n                className: \"wrapped\"\n            }}\n            panes={panes}\n            onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { IProfile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface IProps\n{\n    profile: IProfile;\n}\n\nexport default observer(function ProfileHeader({profile}: IProps)\n{\n    return(\n        <Segment>\n            <Grid>\n                <Grid.Column width={10}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage()\n{\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () =>\n        {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if(loadingProfile)\n    {\n        return <LoadingComponent content='Loading Profile...' />\n    }\n\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                {profile && \n                <>\n                    <ProfileHeader profile={profile} />\n                    <ProfileContent profile={profile} />\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n})\n\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport DefectDashboard from '../../features/defects/dashboard/DefectDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport DefectForm from '../../features/defects/form/DefectForm';\nimport DefectDetails from '../../features/defects/details/DefectDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }\n    else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading App...' />\n\n  return (\n    <div className=\"page-container\">\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <div className=\"content-wrap\">\n        <Route exact path='/' component={HomePage} />\n        <Route\n          path={'/(.+)'}\n          render={() => (\n            <>\n              <NavBar />\n              <Container style={{ marginTop: '7em' }}>\n                <Switch>\n                  <PrivateRoute exact path='/defects' component={DefectDashboard} />\n                  <PrivateRoute path='/defects/:id' component={DefectDetails} />\n                  <PrivateRoute key={location.key} path={['/createDefect', '/manage/:id']} component={DefectForm} />\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                  <PrivateRoute path='/errors' component={TestErrors} />\n                  <Route path='/server-error' component={ServerError} />\n                  <Route component={NotFound} />\n                </Switch>\n              </Container>\n            </>\n          )}\n        />\n      </div>\n      <footer>\n        <div className=\"text-center footer-text\">Bilal Afzaal <span>&#169;</span> 2021</div>\n      </footer>\n    </div>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}